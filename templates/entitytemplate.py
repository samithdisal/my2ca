
'''
Auto Generated by my2ca
@author: ${author}
Generated on ${date}
'''

import pycassa
import uuid
import pickle

import conpool

from entity import entity

class ${t.name}(entity):
    """
    ${t.name} data entity class
    """
    
    __ca_cf = "${t.name}"
    __ca_cf = 
    
    % for col in t.cols:
    ${makecol(col)}
    % endfor
    def __init__(self):
        entity.__init__(self)
    
    ${makeinsert(t.cols)}
    ${makeremove()}
    
<%def name="makecol(col)">
    self.${col.name} = ${col.type}(${col.typeargs})
</%def>
<%def name="makeinsert(cols)">
    """
    Default Insert/Update Method
    """
    def persist(self):
        if self.__ca_hash == None:
            self.__ca_hash == uuid.uuid4()
            #triggers specially for pre insert
            #---------------------
            
            #---------------------
        else:
            #triggers specially for non inserting pre update
            #---------------------
            
            #---------------------
        
        cf = pycassa.ColumnFamily(conpool.connection_pool, self.__ca_cf)
        
        #triggers for pre insert or update
        #-------------------------
        
        #-------------------------
        
        cf.insert(
                  self.__ca_hash,
                  {
                   % for col in cols:
                   '${col.name}': self.${col.name},
                   % endfor
                   }
                  )
        
        #triggers for post insert or update
        #-------------------------
        
        #-------------------------
        pass
</%def>
<%def name="makeremove()">
    """
    Default Remove Method
    """
    def remove(self):
        if self.__ca_hash == None:
            #the object is not persisted so nothing to remove anyway
            return False
        cf = pycassa.ColumnFamily(conpool.connection_pool, self.__ca_cf)
        
        #triggers for pre remove
        #---------------------------
        
        #---------------------------
        
        cf.remove(self.__ca_hash)
        
        #tridders for post remove
        #---------------------------
        
        #---------------------------
        return True
</%def>