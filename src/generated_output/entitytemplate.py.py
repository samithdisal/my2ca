# -*- encoding:ascii -*-
from mako import runtime, filters, cache
UNDEFINED = runtime.UNDEFINED
__M_dict_builtin = dict
__M_locals_builtin = locals
_magic_number = 6
_modified_time = 1321978864.930224
_template_filename='../../../templates/entitytemplate.py'
_template_uri='entitytemplate.py'
_template_cache=cache.Cache(__name__, _modified_time)
_source_encoding='ascii'
_exports = ['makeremove', 'get', 'makeinsert', 'construct', 'makecol']


def render_body(context,**pageargs):
    context.caller_stack._push_frame()
    try:
        __M_locals = __M_dict_builtin(pageargs=pageargs)
        def makeremove():
            return render_makeremove(context.locals_(__M_locals))
        author = context.get('author', UNDEFINED)
        t = context.get('t', UNDEFINED)
        def makecol(col):
            return render_makecol(context.locals_(__M_locals),col)
        date = context.get('date', UNDEFINED)
        def makeinsert(cols):
            return render_makeinsert(context.locals_(__M_locals),cols)
        __M_writer = context.writer()
        # SOURCE LINE 1
        __M_writer(u"\n'''\nAuto Generated by my2ca\n@author: ")
        # SOURCE LINE 4
        __M_writer(unicode(author))
        __M_writer(u'\nGenerated on ')
        # SOURCE LINE 5
        __M_writer(unicode(date))
        __M_writer(u"\n'''\n\nimport pycassa\nimport uuid\nimport pickle\n\nimport conpool\n\nfrom entity import entity\n\nclass ")
        # SOURCE LINE 16
        __M_writer(unicode(t.name))
        __M_writer(u'(entity):\n    """\n    ')
        # SOURCE LINE 18
        __M_writer(unicode(t.name))
        __M_writer(u' data entity class\n    """\n    \n    __ca_cf = "')
        # SOURCE LINE 21
        __M_writer(unicode(t.name))
        __M_writer(u'"\n    __ca_hash = None\n    \n')
        # SOURCE LINE 24
        for col in t.cols:
            # SOURCE LINE 25
            __M_writer(u'    ')
            __M_writer(unicode(makecol(col)))
            __M_writer(u'\n')
            pass
        # SOURCE LINE 27
        __M_writer(u'    def __init__(self):\n        entity.__init__(self)\n    \n    ')
        # SOURCE LINE 30
        __M_writer(unicode(makeinsert(t.cols)))
        __M_writer(u'\n    ')
        # SOURCE LINE 31
        __M_writer(unicode(makeremove()))
        __M_writer(u'\n    \n')
        # SOURCE LINE 51
        __M_writer(u'\n\n')
        # SOURCE LINE 93
        __M_writer(u'\n')
        # SOURCE LINE 118
        __M_writer(u'\n')
        # SOURCE LINE 127
        __M_writer(u'\n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_makeremove(context):
    context.caller_stack._push_frame()
    try:
        __M_writer = context.writer()
        # SOURCE LINE 94
        __M_writer(u'\n    \n    def remove(self):\n        """\n        Default Remove Method\n        """\n        if self.__ca_hash == None:\n            #the object is not persisted so nothing to remove anyway\n            return False\n        cf = pycassa.ColumnFamily(conpool.connection_pool, self.__ca_cf)\n        \n        #triggers for pre remove\n        #---------------------------\n        \n        #---------------------------\n        \n        cf.remove(self.__ca_hash)\n        \n        #tridders for post remove\n        #---------------------------\n        \n        #---------------------------\n        return True\n    \n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_get(context,t):
    context.caller_stack._push_frame()
    try:
        __M_writer = context.writer()
        # SOURCE LINE 128
        __M_writer(u'\n    \n    @classmethod\n    def get(id):\n        """\n        Get by hashcode\n        """\n        cf = pycassa.ColumnFamily(conpool.connection_pool, self.__ca_cf)\n        res = cf.get(id)\n        \n        t = ')
        # SOURCE LINE 138
        __M_writer(unicode(t.name))
        __M_writer(u'()\n        t.__ca_hash = id\n        \n')
        # SOURCE LINE 141
        for c in t.cols:
            # SOURCE LINE 142
            __M_writer(u'            t.set_')
            __M_writer(unicode(c.name))
            __M_writer(u'(res.get(')
            __M_writer(unicode(c.name))
            __M_writer(u'))\n')
            pass
        # SOURCE LINE 144
        __M_writer(u'        \n        return t\n    \n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_makeinsert(context,cols):
    context.caller_stack._push_frame()
    try:
        __M_writer = context.writer()
        # SOURCE LINE 53
        __M_writer(u'\n    \n    def persist(self):\n        """\n        Default Insert/Update Method Call this after an update or after creating an object\n        """\n        if self.__ca_hash == None:\n            self.__ca_hash == uuid.uuid4()\n            #triggers specially for pre insert\n            #---------------------\n            \n            #---------------------\n        else:\n            #triggers specially for non inserting pre update\n            #---------------------\n            \n            #---------------------\n        \n        cf = pycassa.ColumnFamily(conpool.connection_pool, self.__ca_cf)\n        \n        #triggers for pre insert or update\n        #-------------------------\n        \n        #-------------------------\n        \n        cf.insert(\n                  self.__ca_hash,\n                  {\n')
        # SOURCE LINE 81
        for col in cols:
            # SOURCE LINE 82
            __M_writer(u"                   '")
            __M_writer(unicode(col.name))
            __M_writer(u"': self.")
            __M_writer(unicode(col.name))
            __M_writer(u',\n')
            pass
        # SOURCE LINE 84
        __M_writer(u'                   }\n                  )\n        \n        #triggers for post insert or update\n        #-------------------------\n        \n        #-------------------------\n        pass\n    \n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_construct(context,t):
    context.caller_stack._push_frame()
    try:
        __M_writer = context.writer()
        # SOURCE LINE 119
        __M_writer(u'\n    \n    def __init__(self):\n        """\n        Default Constructor Method\n        """\n        pass\n    \n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_makecol(context,col):
    context.caller_stack._push_frame()
    try:
        __M_writer = context.writer()
        # SOURCE LINE 33
        __M_writer(u'\n    \n    """ Column ')
        # SOURCE LINE 35
        __M_writer(unicode(col.name))
        __M_writer(u' """\n    _')
        # SOURCE LINE 36
        __M_writer(unicode(col.name))
        __M_writer(u' = ')
        __M_writer(unicode(col.type))
        __M_writer(u'(')
        __M_writer(unicode(col.typeargs))
        __M_writer(u')\n    \n    def set_')
        # SOURCE LINE 38
        __M_writer(unicode(col.name))
        __M_writer(u'(self, value):\n        """\n        Set ')
        # SOURCE LINE 40
        __M_writer(unicode(col.name))
        __M_writer(u' value to \'value\'\n        """\n        self._')
        # SOURCE LINE 42
        __M_writer(unicode(col.name))
        __M_writer(u' = value\n        pass\n    \n    def get_')
        # SOURCE LINE 45
        __M_writer(unicode(col.name))
        __M_writer(u'(self):\n        """\n        Get ')
        # SOURCE LINE 47
        __M_writer(unicode(col.name))
        __M_writer(u' value\n        """\n        return self._')
        # SOURCE LINE 49
        __M_writer(unicode(col.name))
        __M_writer(u'\n    \n')
        return ''
    finally:
        context.caller_stack._pop_frame()


